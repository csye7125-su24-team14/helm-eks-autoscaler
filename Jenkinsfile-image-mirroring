pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentials')
        CLUSTER_AUTOSCALER_DOCKER_IMAGE = "anuragnandre/eks-cluster-autoscaler"
    }
    
    stages {
        stage('Read Helm Values') {
            steps {
                script {
                    def values = readYaml file: "./values.yaml"
                    env.IMAGE_REPO = values.image.repository
                    env.IMAGE_TAG = values.image.tag
                }
            }
        }
        
        stage('Create Builder and Latest Tag') {
            steps {
                script {
                    // LATEST_TAG = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                    // Create and use a new builder instance
                    sh 'docker buildx create --use'
                }
            }
        }
        stage('Mirror Image to DockerHub') {
            steps {
                script {
                     withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin"
                    }

                    // Pull the original image
                    sh "docker pull ${env.IMAGE_REPO}:${env.IMAGE_TAG}"

                    // Tag the image for your DockerHub organization
                    sh "docker tag ${env.IMAGE_REPO}:${env.IMAGE_TAG} ${env.CLUSTER_AUTOSCALER_DOCKER_IMAGE}:${env.IMAGE_TAG}"
                    sh "docker tag ${env.IMAGE_REPO}:${env.IMAGE_TAG} ${env.CLUSTER_AUTOSCALER_DOCKER_IMAGE}:latest"
                    
                    // Push the image to your DockerHub organization
                    sh "docker push ${env.CLUSTER_AUTOSCALER_DOCKER_IMAGE}:${env.IMAGE_TAG}"
                }
            }
        }
        
        stage('Update Helm Chart') {
            steps {
                script {
                    // Update the values.yaml file with the new image repository
                    sh """
                    sed -i 's|repository: ${env.IMAGE_REPO}|repository: ${env.CLUSTER_AUTOSCALER_DOCKER_IMAGE}|' ./values.yaml
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}